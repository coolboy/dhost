/*
 * Canvas.java
 *
 * Created on __DATE__, __TIME__
 */

package dhost.ui;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.Enumeration;
import java.util.Vector;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;

/**
 *
 * @author  __USER__
 */
@SuppressWarnings("serial")
public class Canvas extends javax.swing.JPanel implements UIInterface,KeyListener, MouseListener {

	//my code
	//Mutex to protect gitems
	private ReadWriteLock rwloc_;
	
	// Keep track of all ball center positions
	private Vector<GraphicState> gitems;

	@Override
	public void Update(Vector<GraphicState> gitems) {
		rwloc_.writeLock();
		this.gitems = gitems;
	}

	// This is the method that is responsible for displaying the contents of the
	// canvas
	public void paintComponent(Graphics graphics) {
		rwloc_.readLock();
		// Draw the component as before (i.e., default look)
		super.paintComponent(graphics);

		// Now add all of our balls
		Enumeration<GraphicState> enumeration = gitems.elements();
		while (enumeration.hasMoreElements()) {
			GraphicState gitem = enumeration.nextElement();
			graphics.setColor(gitem.getColor());
			switch(gitem.getType())
			{
			case OVAL:
				graphics.drawOval(gitem.getPos().x, gitem.getPos().y,
						gitem.getSize().x, gitem.getSize().y);
				break;
			case RECT:
				graphics.drawRect(gitem.getPos().x, gitem.getPos().y,
						gitem.getSize().x, gitem.getSize().y);
				break;
			default:
				assert(false);
			}
		}
	}

	@Override
	public void keyPressed(KeyEvent e) {
		int kc = e.getKeyCode();
		switch (kc)
		{
		case java.awt.event.KeyEvent.VK_UP:
			break;
		case java.awt.event.KeyEvent.VK_DOWN:
			break;
		case java.awt.event.KeyEvent.VK_LEFT:
			break;
		case java.awt.event.KeyEvent.VK_RIGHT:
			break;
		}
	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}
	//end of my code
	
	/** Creates new form Canvas */
	public Canvas() {
		initComponents();
		setBackground(Color.white);
		
		gitems = new Vector<GraphicState>();
		rwloc_ = new ReentrantReadWriteLock();

		addKeyListener(this);
		addMouseListener(this);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	//GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 400,
				Short.MAX_VALUE));
		layout.setVerticalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 300,
				Short.MAX_VALUE));
	}// </editor-fold>
	//GEN-END:initComponents

	@Override
	public void mouseClicked(MouseEvent e) {
		requestFocus(false);
	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	//GEN-BEGIN:variables
	// Variables declaration - do not modify
	// End of variables declaration//GEN-END:variables

}